/*
 * Copyright 2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.mx.ymate.monitor.impl;

import com.mx.ymate.monitor.IMonitor;
import com.mx.ymate.monitor.IMonitorConfig;
import net.ymate.platform.core.module.IModuleConfigurer;
import net.ymate.platform.core.module.impl.DefaultModuleConfigurable;

/**
 * DefaultNettyConfig generated By ModuleMojo on 2022/07/07 10:19
 *
 * @author YMP (https://www.ymate.net/)
 */
public final class DefaultMonitorConfigurable extends DefaultModuleConfigurable {

    public static Builder builder() {
        return new Builder();
    }

    private DefaultMonitorConfigurable() {
        super(IMonitor.MODULE_NAME);
    }

    public static final class Builder {

        private final DefaultMonitorConfigurable configurable = new DefaultMonitorConfigurable();

        private Builder() {
        }

        public Builder enabled(boolean enabled) {
            configurable.addConfig(IMonitorConfig.ENABLED, String.valueOf(enabled));
            return this;
        }

        public Builder autoStart(boolean autoStart) {
            configurable.addConfig(IMonitorConfig.AUTO_START, String.valueOf(autoStart));
            return this;
        }

        public Builder client(String client) {
            configurable.addConfig(IMonitorConfig.CLIENT, client);
            return this;
        }

        public Builder type(String type) {
            configurable.addConfig(IMonitorConfig.TYPE, type);
            return this;
        }

        public Builder time(Integer time) {
            configurable.addConfig(IMonitorConfig.TIME, String.valueOf(time));
            return this;
        }

        public Builder serverId(String serverId) {
            configurable.addConfig(IMonitorConfig.SERVER_ID, serverId);
            return this;
        }

        public Builder projectId(String projectId) {
            configurable.addConfig(IMonitorConfig.PROJECT_ID, projectId);
            return this;
        }

        public Builder dataSubscribeListener(String dataSubscribeListener) {
            configurable.addConfig(IMonitorConfig.DATA_SUBSCRIBE_LISTENER, dataSubscribeListener);
            return this;
        }

        public IModuleConfigurer build() {
            return configurable.toModuleConfigurer();
        }
    }
}