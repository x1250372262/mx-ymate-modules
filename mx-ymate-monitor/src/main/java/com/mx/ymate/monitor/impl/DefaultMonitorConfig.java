/*
 * Copyright 2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.mx.ymate.monitor.impl;

import com.mx.ymate.dev.util.ConfigUtil;
import com.mx.ymate.monitor.IMonitor;
import com.mx.ymate.monitor.IMonitorConfig;
import com.mx.ymate.monitor.enums.ClientEnum;
import com.mx.ymate.monitor.mq.IDataSubscribeListener;
import net.ymate.platform.core.module.IModuleConfigurer;
import org.apache.commons.lang.NullArgumentException;
import org.apache.commons.lang3.StringUtils;

/**
 * DefaultNettyConfig generated By ModuleMojo on 2022/07/07 10:19
 *
 * @author YMP (https://www.ymate.net/)
 */
public final class DefaultMonitorConfig implements IMonitorConfig {

    private boolean enabled;
    private Boolean autoStart;
    private String client;
    private String type;
    private Integer time;
    private String serverId;
    private String projectId;
    private IDataSubscribeListener dataSubscribeListener;

    private boolean initialized;


    public static DefaultMonitorConfig defaultConfig() {
        return builder().build();
    }

    public static DefaultMonitorConfig create(IModuleConfigurer moduleConfigurer) {
        return new DefaultMonitorConfig(moduleConfigurer);
    }

    public static Builder builder() {
        return new Builder();
    }

    private DefaultMonitorConfig() {
    }

    private DefaultMonitorConfig(IModuleConfigurer moduleConfigurer) {
        ConfigUtil configUtil = new ConfigUtil(moduleConfigurer.getConfigReader().toMap());
        enabled = configUtil.getBool(ENABLED, true);
        autoStart = configUtil.getBool(AUTO_START, true);
        client = configUtil.getString(CLIENT, "all");
        type = configUtil.getString(TYPE, "all");
        time = configUtil.getInteger(TIME,30);
        serverId = configUtil.getString(SERVER_ID);
        if(StringUtils.isBlank(serverId)){
            throw new NullArgumentException(SERVER_ID);
        }
        projectId = configUtil.getString(PROJECT_ID);
        if(StringUtils.isBlank(projectId)){
            throw new NullArgumentException(PROJECT_ID);
        }
        dataSubscribeListener = configUtil.getClassImpl(DATA_SUBSCRIBE_LISTENER,IDataSubscribeListener.class);
        if(dataSubscribeListener == null && ClientEnum.isClient(client)){
            throw new NullArgumentException(DATA_SUBSCRIBE_LISTENER);
        }
    }

    @Override
    public void initialize(IMonitor owner) throws Exception {
        if (!initialized) {
            if (enabled) {
                // TODO What to do?
            }
            initialized = true;
        }
    }

    @Override
    public boolean isInitialized() {
        return initialized;
    }

    @Override
    public boolean isEnabled() {
        return enabled;
    }

    @Override
    public Boolean autoStart() {
        return autoStart;
    }

    @Override
    public String type() {
        return type;
    }

    @Override
    public String client() {
        return client;
    }

    @Override
    public Integer time() {
        return time;
    }

    @Override
    public String serverId() {
        return serverId;
    }

    @Override
    public String projectId() {
        return projectId;
    }

    @Override
    public IDataSubscribeListener dataSubscribeListener() {
        return dataSubscribeListener;
    }


    public void setEnabled(boolean enabled) {
        if (!initialized) {
            this.enabled = enabled;
        }
    }

    public void setAutoStart(Boolean autoStart) {
        if (!initialized) {
            this.autoStart = autoStart;
        }
    }

    public void setClient(String client) {
        if (!initialized) {
            this.client = client;
        }
    }

    public void setType(String type) {
        if (!initialized) {
            this.type = type;
        }
    }

    public void setTime(Integer time) {
        if (!initialized) {
            this.time = time;
        }
    }

    public void setServerId(String serverId) {
        if (!initialized) {
            this.serverId = serverId;
        }
    }

    public void setProjectId(String projectId) {
        if (!initialized) {
            this.projectId = projectId;
        }
    }

    public void setDataSubscribeListener(IDataSubscribeListener dataSubscribeListener) {
        if (!initialized) {
            this.dataSubscribeListener = dataSubscribeListener;
        }
    }

    public static final class Builder {

        private final DefaultMonitorConfig config = new DefaultMonitorConfig();

        private Builder() {
        }

        public Builder enabled(boolean enabled) {
            config.setEnabled(enabled);
            return this;
        }

        public Builder client(String client) {
            config.setClient(client);
            return this;
        }

        public Builder type(String type) {
            config.setType(type);
            return this;
        }

        public Builder time(Integer time) {
            config.setTime(time);
            return this;
        }

        public Builder serverId(String serverId) {
            config.setServerId(serverId);
            return this;
        }

        public Builder projectId(String projectId) {
            config.setProjectId(projectId);
            return this;
        }


        public DefaultMonitorConfig build() {
            return config;
        }
    }
}