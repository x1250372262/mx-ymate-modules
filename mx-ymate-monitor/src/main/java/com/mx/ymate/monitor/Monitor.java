/*
 * Copyright 2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.mx.ymate.monitor;

import com.mx.ymate.monitor.enums.ClientEnum;
import com.mx.ymate.monitor.helper.ServerHelper;
import com.mx.ymate.monitor.impl.DefaultMonitorConfig;
import net.ymate.platform.core.*;
import net.ymate.platform.core.module.IModule;
import net.ymate.platform.core.module.IModuleConfigurer;
import net.ymate.platform.core.module.impl.DefaultModuleConfigurer;


/**
 * Netty generated By ModuleMojo on 2022/07/07 10:19
 *
 * @author YMP (<a href="https://www.ymate.net/">...</a>)
 */
public final class Monitor implements IModule, IMonitor {


    private static volatile IMonitor instance;

    private IApplication owner;

    private IMonitorConfig config;

    private boolean initialized;

    public static IMonitor get() {
        IMonitor inst = instance;
        if (inst == null) {
            synchronized (Monitor.class) {
                inst = instance;
                if (inst == null) {
                    instance = inst = YMP.get().getModuleManager().getModule(Monitor.class);
                }
            }
        }
        return inst;
    }

    public Monitor() {
    }

    public Monitor(IMonitorConfig config) {
        this.config = config;
    }

    @Override
    public String getName() {
        return MODULE_NAME;
    }

    @Override
    public void initialize(IApplication owner) throws Exception {
        if (!initialized) {
            //
            YMP.showVersion("Initializing mx-ymate-netty-monitor-${version}", new Version(1, 0, 0, Monitor.class, Version.VersionType.Alpha));
            //
            this.owner = owner;
            if (config == null) {
                IApplicationConfigureFactory configureFactory = owner.getConfigureFactory();
                if (configureFactory != null) {
                    IApplicationConfigurer configurer = configureFactory.getConfigurer();
                    IModuleConfigurer moduleConfigurer = configurer == null ? null : configurer.getModuleConfigurer(MODULE_NAME);
                    if (moduleConfigurer != null) {
                        config = DefaultMonitorConfig.create(moduleConfigurer);
                    } else {
                        config = DefaultMonitorConfig.create(DefaultModuleConfigurer.createEmpty(MODULE_NAME));
                    }
                }
                if (config == null) {
                    config = DefaultMonitorConfig.defaultConfig();
                }
            }
            if (!config.isInitialized()) {
                config.initialize(this);
            }

            if (config.isEnabled() && config.autoStart()) {
                start();
            }
            initialized = true;
        }
    }

    @Override
    public boolean isInitialized() {
        return initialized;
    }

    @Override
    public void close() throws Exception {
        if (initialized) {
            initialized = false;
            //
            if (config.isEnabled()) {
                stop();
            }
            //
            config = null;
            owner = null;
        }
    }

    @Override
    public IApplication getOwner() {
        return owner;
    }

    @Override
    public IMonitorConfig getConfig() {
        return config;
    }

    @Override
    public void start() throws Exception {
        if (ClientEnum.isClient(config.client())) {
            ServerHelper.start(config);
        }

    }

    @Override
    public void stop() throws Exception {
        if (ClientEnum.isClient(config.client())) {
            ServerHelper.stop();
        }
    }

}
