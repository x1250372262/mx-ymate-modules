/*
 * Copyright 2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.mx.ymate.monitor.model;

import net.ymate.platform.core.beans.annotation.PropertyState;
import net.ymate.platform.core.persistence.annotation.Comment;
import net.ymate.platform.core.persistence.annotation.Default;
import net.ymate.platform.core.persistence.annotation.Entity;
import net.ymate.platform.core.persistence.annotation.Id;
import net.ymate.platform.core.persistence.annotation.Property;
import net.ymate.platform.core.persistence.annotation.Readonly;
import net.ymate.platform.persistence.jdbc.JDBC;
import net.ymate.platform.persistence.jdbc.query.AbstractFieldConditionBuilder;
import net.ymate.platform.persistence.jdbc.query.FieldCondition;
import net.ymate.platform.persistence.jdbc.query.Query;
import net.ymate.platform.persistence.jdbc.support.BaseEntity;
import net.ymate.platform.core.persistence.IShardingable;
import net.ymate.platform.persistence.jdbc.IDatabase;
import net.ymate.platform.persistence.jdbc.IDatabaseConnectionHolder;
import org.apache.commons.lang3.StringUtils;

/**
 * Server generated By EntityMojo on 2024/02/23 11:35:48
 *
 * @author YMP (https://www.ymate.net/)
 */
@Entity(Server.TABLE_NAME)
@Comment("服务器")
public class Server extends BaseEntity<Server, java.lang.String> {

    private static final long serialVersionUID = 1L;

    @Id
    @Property(name = FIELDS.ID, nullable = false, length = 32)
    @Comment("")
    @PropertyState(propertyName = FIELDS.ID)
    private java.lang.String id;

    
    @Property(name = FIELDS.NAME, nullable = false, length = 100)
    @Comment("名称")
    @PropertyState(propertyName = FIELDS.NAME)
    private java.lang.String name;

    
    @Property(name = FIELDS.IP, nullable = false, length = 32)
    @Comment("IP")
    @PropertyState(propertyName = FIELDS.IP)
    private java.lang.String ip;

    
    @Property(name = FIELDS.USER, nullable = false, length = 32)
    @Comment("用户")
    @PropertyState(propertyName = FIELDS.USER)
    private java.lang.String user;

    
    @Property(name = FIELDS.PASSWORD, nullable = false, length = 32)
    @Comment("密码")
    @PropertyState(propertyName = FIELDS.PASSWORD)
    private java.lang.String password;

    
    @Property(name = FIELDS.REMARK, length = 255)
    @Comment("备注")
    @PropertyState(propertyName = FIELDS.REMARK)
    private java.lang.String remark;

    
    @Property(name = FIELDS.CREATE_TIME, nullable = false, length = 19)
    @Default("0")
    @Comment("创建时间")
    @PropertyState(propertyName = FIELDS.CREATE_TIME)
    private java.lang.Long createTime;

    
    @Property(name = FIELDS.CREATE_USER, nullable = false, length = 32)
    @Comment("创建人")
    @PropertyState(propertyName = FIELDS.CREATE_USER)
    private java.lang.String createUser;

    
    @Property(name = FIELDS.LAST_MODIFY_TIME, nullable = false, length = 19)
    @Default("0")
    @Comment("最后修改时间")
    @PropertyState(propertyName = FIELDS.LAST_MODIFY_TIME)
    private java.lang.Long lastModifyTime;

    
    @Property(name = FIELDS.LAST_MODIFY_USER, nullable = false, length = 32)
    @Comment("最后修改人")
    @PropertyState(propertyName = FIELDS.LAST_MODIFY_USER)
    private java.lang.String lastModifyUser;


    public Server() {
    }

    public Server(IDatabase dbOwner) {
        super(dbOwner);
    }

    public Server(java.lang.String id, java.lang.String name, java.lang.String ip, java.lang.String user, java.lang.String password, java.lang.Long createTime, java.lang.String createUser, java.lang.Long lastModifyTime, java.lang.String lastModifyUser) {
        this.id = id;
        this.name = name;
        this.ip = ip;
        this.user = user;
        this.password = password;
        this.createTime = createTime;
        this.createUser = createUser;
        this.lastModifyTime = lastModifyTime;
        this.lastModifyUser = lastModifyUser;
    }

        public Server(IDatabase dbOwner, java.lang.String id, java.lang.String name, java.lang.String ip, java.lang.String user, java.lang.String password, java.lang.Long createTime, java.lang.String createUser, java.lang.Long lastModifyTime, java.lang.String lastModifyUser) {
            super(dbOwner);
            this.id = id;
            this.name = name;
            this.ip = ip;
            this.user = user;
            this.password = password;
            this.createTime = createTime;
            this.createUser = createUser;
            this.lastModifyTime = lastModifyTime;
            this.lastModifyUser = lastModifyUser;
        }

    public Server(java.lang.String id, java.lang.String name, java.lang.String ip, java.lang.String user, java.lang.String password, java.lang.String remark, java.lang.Long createTime, java.lang.String createUser, java.lang.Long lastModifyTime, java.lang.String lastModifyUser) {
        this.id = id;
        this.name = name;
        this.ip = ip;
        this.user = user;
        this.password = password;
        this.remark = remark;
        this.createTime = createTime;
        this.createUser = createUser;
        this.lastModifyTime = lastModifyTime;
        this.lastModifyUser = lastModifyUser;
    }

    public Server(IDatabase dbOwner, java.lang.String id, java.lang.String name, java.lang.String ip, java.lang.String user, java.lang.String password, java.lang.String remark, java.lang.Long createTime, java.lang.String createUser, java.lang.Long lastModifyTime, java.lang.String lastModifyUser) {
        super(dbOwner);
        this.id = id;
        this.name = name;
        this.ip = ip;
        this.user = user;
        this.password = password;
        this.remark = remark;
        this.createTime = createTime;
        this.createUser = createUser;
        this.lastModifyTime = lastModifyTime;
        this.lastModifyUser = lastModifyUser;
    }

    @Override
    public java.lang.String getId() {
        return id;
    }

    @Override
    public void setId(java.lang.String id) {
        this.id = id;
    }

    public java.lang.String getName() {
        return name;
    }

    public void setName(java.lang.String name) {
        this.name = name;
    }

    public java.lang.String getIp() {
        return ip;
    }

    public void setIp(java.lang.String ip) {
        this.ip = ip;
    }

    public java.lang.String getUser() {
        return user;
    }

    public void setUser(java.lang.String user) {
        this.user = user;
    }

    public java.lang.String getPassword() {
        return password;
    }

    public void setPassword(java.lang.String password) {
        this.password = password;
    }

    public java.lang.String getRemark() {
        return remark;
    }

    public void setRemark(java.lang.String remark) {
        this.remark = remark;
    }

    public java.lang.Long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(java.lang.Long createTime) {
        this.createTime = createTime;
    }

    public java.lang.String getCreateUser() {
        return createUser;
    }

    public void setCreateUser(java.lang.String createUser) {
        this.createUser = createUser;
    }

    public java.lang.Long getLastModifyTime() {
        return lastModifyTime;
    }

    public void setLastModifyTime(java.lang.Long lastModifyTime) {
        this.lastModifyTime = lastModifyTime;
    }

    public java.lang.String getLastModifyUser() {
        return lastModifyUser;
    }

    public void setLastModifyUser(java.lang.String lastModifyUser) {
        this.lastModifyUser = lastModifyUser;
    }


    public Builder bind() {
        return new Builder(this);
    }

    public static Builder builder() {
        return new Builder();
    }

        public static Builder builder(IDatabase dbOwner) {
            return new Builder(dbOwner);
        }

    public static class Builder {

        private final Server targetEntity;

        public Builder() {
            targetEntity = new Server();
        }

        public Builder(IDatabase dbOwner) {
            targetEntity = new Server(dbOwner);
        }

        public Builder(Server targetEntity) {
            this.targetEntity = targetEntity;
        }

        public Server build() {
            return targetEntity;
        }

        public IDatabaseConnectionHolder connectionHolder() {
            return targetEntity.getConnectionHolder();
        }

        public Builder connectionHolder(IDatabaseConnectionHolder connectionHolder) {
            targetEntity.setConnectionHolder(connectionHolder);
            return this;
        }

        public IDatabase dbOwner() {
            return targetEntity.getDbOwner();
        }

        public Builder dbOwner(IDatabase dbOwner) {
            targetEntity.setDbOwner(dbOwner);
            return this;
        }

        public String dataSourceName() {
            return targetEntity.getDataSourceName();
        }

        public Builder dataSourceName(String dataSourceName) {
            targetEntity.setDataSourceName(dataSourceName);
            return this;
        }

        public IShardingable shardingable() {
            return targetEntity.getShardingable();
        }

        public Builder shardingable(IShardingable shardingable) {
            targetEntity.setShardingable(shardingable);
            return this;
        }


        public java.lang.String id() {
            return targetEntity.getId();
        }

        public Builder id(java.lang.String id) {
            targetEntity.setId(id);
            return this;
        }

        public java.lang.String name() {
            return targetEntity.getName();
        }

        public Builder name(java.lang.String name) {
            targetEntity.setName(name);
            return this;
        }

        public java.lang.String ip() {
            return targetEntity.getIp();
        }

        public Builder ip(java.lang.String ip) {
            targetEntity.setIp(ip);
            return this;
        }

        public java.lang.String user() {
            return targetEntity.getUser();
        }

        public Builder user(java.lang.String user) {
            targetEntity.setUser(user);
            return this;
        }

        public java.lang.String password() {
            return targetEntity.getPassword();
        }

        public Builder password(java.lang.String password) {
            targetEntity.setPassword(password);
            return this;
        }

        public java.lang.String remark() {
            return targetEntity.getRemark();
        }

        public Builder remark(java.lang.String remark) {
            targetEntity.setRemark(remark);
            return this;
        }

        public java.lang.Long createTime() {
            return targetEntity.getCreateTime();
        }

        public Builder createTime(java.lang.Long createTime) {
            targetEntity.setCreateTime(createTime);
            return this;
        }

        public java.lang.String createUser() {
            return targetEntity.getCreateUser();
        }

        public Builder createUser(java.lang.String createUser) {
            targetEntity.setCreateUser(createUser);
            return this;
        }

        public java.lang.Long lastModifyTime() {
            return targetEntity.getLastModifyTime();
        }

        public Builder lastModifyTime(java.lang.Long lastModifyTime) {
            targetEntity.setLastModifyTime(lastModifyTime);
            return this;
        }

        public java.lang.String lastModifyUser() {
            return targetEntity.getLastModifyUser();
        }

        public Builder lastModifyUser(java.lang.String lastModifyUser) {
            targetEntity.setLastModifyUser(lastModifyUser);
            return this;
        }
    }

    public interface FIELDS {
        String ID = "id";
        String NAME = "name";
        String IP = "ip";
        String USER = "user";
        String PASSWORD = "password";
        String REMARK = "remark";
        String CREATE_TIME = "create_time";
        String CREATE_USER = "create_user";
        String LAST_MODIFY_TIME = "last_modify_time";
        String LAST_MODIFY_USER = "last_modify_user";
    }

    public static final String TABLE_NAME = "server";

    public static FieldConditionBuilder conditionBuilder() {
        return new FieldConditionBuilder();
    }

    public static FieldConditionBuilder conditionBuilder(String prefix) {
        return new FieldConditionBuilder(prefix);
    }

    public static FieldConditionBuilder conditionBuilder(Query<?> query) {
        return conditionBuilder(query, null);
    }

    public static FieldConditionBuilder conditionBuilder(Query<?> query, String prefix) {
        return new FieldConditionBuilder(query.owner(), query.dataSourceName(), prefix);
    }

    public static FieldConditionBuilder conditionBuilder(Server entity) {
        return conditionBuilder(entity, null);
    }

    public static FieldConditionBuilder conditionBuilder(Server entity, String prefix) {
        return new FieldConditionBuilder(entity.doGetSafeOwner(), entity.getDataSourceName(), prefix);
    }

    public static FieldConditionBuilder conditionBuilder(IDatabase owner, String prefix) {
        return new FieldConditionBuilder(owner, prefix);
    }

    public static FieldConditionBuilder conditionBuilder(IDatabase owner, String dataSourceName, String prefix) {
        return new FieldConditionBuilder(owner, dataSourceName, prefix);
    }

    public static class FieldConditionBuilder extends AbstractFieldConditionBuilder {

        public FieldConditionBuilder() {
            super(null, null, null);
        }

        public FieldConditionBuilder(String prefix) {
            super(null, null, prefix);
        }

        public FieldConditionBuilder(Query<?> query) {
            super(query.owner(), null, null);
        }

        public FieldConditionBuilder(Query<?> query, String prefix) {
            super(query.owner(), query.dataSourceName(), prefix);
        }

        public FieldConditionBuilder(IDatabase owner) {
            super(owner, null, null);
        }

        public FieldConditionBuilder(IDatabase owner, String prefix) {
            super(owner, null, prefix);
        }

        public FieldConditionBuilder(IDatabase owner, String dataSourceName, String prefix) {
            super(owner, dataSourceName, prefix);
        }

        public FieldCondition id() {
            return createFieldCondition(Server.FIELDS.ID);
        }

        public FieldCondition name() {
            return createFieldCondition(Server.FIELDS.NAME);
        }

        public FieldCondition ip() {
            return createFieldCondition(Server.FIELDS.IP);
        }

        public FieldCondition user() {
            return createFieldCondition(Server.FIELDS.USER);
        }

        public FieldCondition password() {
            return createFieldCondition(Server.FIELDS.PASSWORD);
        }

        public FieldCondition remark() {
            return createFieldCondition(Server.FIELDS.REMARK);
        }

        public FieldCondition createTime() {
            return createFieldCondition(Server.FIELDS.CREATE_TIME);
        }

        public FieldCondition createUser() {
            return createFieldCondition(Server.FIELDS.CREATE_USER);
        }

        public FieldCondition lastModifyTime() {
            return createFieldCondition(Server.FIELDS.LAST_MODIFY_TIME);
        }

        public FieldCondition lastModifyUser() {
            return createFieldCondition(Server.FIELDS.LAST_MODIFY_USER);
        }
    }
}
